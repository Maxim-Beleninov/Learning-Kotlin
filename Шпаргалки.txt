план обучения котлин
1 - введение 
      среды разработки на Kotlin
2 - основы синтаксиса
      переменные - типы  данных - операторы
3 - управляющие структуры
      If - whtn
      циклы - for - while (do-while)
4 - объектно ориентированное программирование
      классы и объекты
      наследование - интерфейсы - абстрактные классы
5 - функциональное программирование 
      лямбда выражения и коллекции 
      основные функции высшего порядка 
6 - основные библиотеки Kotlin
      Ktor - веб разработка 
      android sdk - мобильная разработка

=================================================================================================================================================================================================================
  color: red; /* 1. Введение */

Для Kotlin рекомендуемыми IDE являются: 
JetBrains 
IntelliJ 
IDEA 
Android Studio, обе из которых хорошо интегрированы с Kotlin. 
Android Studio необходима, если вы планируете разрабатывать приложения для Android, а IntelliJ IDEA — мощный инструмент для других типов разработки на Kotlin.
=================================================================================================================================================================================================================


=================================================================================================================================================================================================================
2. ПЕРЕМЕННЫЕ===================================================================================================================================================================================================
Каждая переменная характеризуется определенным именем, типом данных и значением. Имя переменной представляет поизвольный идентификатор, который может содержать алфавитно-цифровые символы или символ подчеркивания и должен начинаться либо с алфавитного символа, либо со знака подчеркивания. Для определения переменной можно использовать либо ключевое слово val, либо ключевое слово var.

Формальное определение переменной:
val|var имя_переменной: тип_переменной
Вначале идет слово val или var, затем имя переменной и через двоеточие тип переменной.

Например, определим переменную age:
var age: Int
То есть в данном случае объявлена переменная age, которая имеет тип Int. Тип Int говорит о том, что переменная будет содержать целочисленные значения.

После определения переменной ей можно присвоить значение:

fun main() {
    var age: Int
    age = 23
    println(age)
}
Для присвоения значения переменной используется знак равно. Затем мы можем производить с переменной различные операции. Например, в данном случае с помощью функции println() значение переменной выводится на консоль. И при запуске этой программы на консоль будет выведено число 23.
Присвоение значения переменной должно производиться только после ее объявления. И также мы можем сразу присвоить переменной начальное значение при ее объявлении. Такой прием называется инициализацией:

fun main() {
    var age: Int = 23
    println(age)
}
Однако обязательно надо присвоить переменной некоторое значение до ее использования:

ИЗМЕНЯЕМЫЕ И НЕИЗМЕНЯЕМЫЕ========================================================================================================================================================================================

С помощью ключевого слова val определяется неизменяемая переменная (immutable variable) или переменная только для чтения (read-only). То есть мы можем присвоить значение такой переменной только один раз, но изменить его после первого присвоения мы уже не сможем. Например, в следующем случае мы получим ошибку:

fun main() {
    val age: Int
    age = 23        // здесь норм - первое присвоение
    age = 56        // здесь ошибка - переопределить значение переменной нельзя
    println(age)
}
А у переменной, которая определена с помощью ключевого слова var мы можем многократно менять значения (mutable variable):

fun main() {
    var age: Int
    age = 23
    println(age)
    age = 56
    println(age)
}
Поэтому если не планируется изменять значение переменной в программе, то лучше определять ее с ключевым словом val.

ОПРЕДЕЛЕНИЕ КОНСТАНТ============================================================================================================================================================================================
Также Kotlin поддерживает константы времени компиляции. Для их определения применяются ключевые слова const val:

const val maxAge = 120  // константа
fun main() {
    println(maxAge)
}
В данном случае maxAge является константой.

Отличительной особенностью констант является то, что они на стадии компиляции должны иметь некоторое значение, и это значение изменить нельзя. Это накладывает на использование констант ряд ограничений:

Тип данных константы должен соответствовать одному из примитивных (например, Int) или типу String

Также стоит отметит отличие val-переменных от констант (const val): значение val-переменных устанавливается во время выполнения, а значение констант - во время компиляции. Значение val-переменной также нельзя изменить после установки, однако мы можем объявить val-переменную, а потом дальше в программе присвоить ей значение. Константе же необходимо присвоить значение сразу при определении.

ЦЕЛОЧИСЛЕННЫЕ ТИПЫ============================================================================================================================================================================================

Byte: хранит целое число от -128 до 127 и занимает 1 байт
Short: хранит целое число от -32 768 до 32 767 и занимает 2 байта
Int: хранит целое число от -2 147 483 648 (-231) до 2 147 483 647 (231 - 1) и занимает 4 байта
Long: хранит целое число от –9 223 372 036 854 775 808 (-263) до 9 223 372 036 854 775 807 (263-1) и занимает 8 байт
В последней версии Kotlin также добавлена поддержка для целочисленных типов без знака:
UByte: хранит целое число от 0 до 255 и занимает 1 байт
UShort: хранит целое число от 0 до 65 535 и занимает 2 байта
UInt: хранит целое число от 0 до 232 - 1 и занимает 4 байта
ULong: хранит целое число от 0 до 264-1 и занимает 8 байт

Объекты целочисленных типов хранят целые числа:

fun main(){
 
    val a: Byte = -10
    val b: Short = 45
    val c: Int = -250
    val d: Long = 30000
    println(a) // -10
    println(b) // 45
    println(c) // -250
    println(d) // 30000
}

ЧИСЛА С ПЛАВАЮЩЕЙ ТОЧКОЙ========================================================================================================================================================================================
Кроме целочисленных типов в Kotlin есть два типа для чисел с плавающей точкой, которые позволяют хранить дробные числа:
Float: хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и занимает 4 байта
Double: хранит число с плавающей точкой от ±5.0*10-324 до ±1.7*10308 и занимает 8 байта.
В качестве разделителя целой и дробной части применяется точка:

val height: Double = 1.78
val pi: Float = 3.14F
println(height)      // 1.78
println(pi)         // 3.14
Чтобы присвоить число объекту типа Float после числа указывается суффикс f или F.

Также тип Double поддерживает экспоненциальную запись:

val d: Double = 23e3
println(d)      // 23 000
 
val g: Double = 23e-3
println(g)      // 0.023

ЛОГИЧЕСКИЙ ТИП (BOOLEAN)=====================================================================================================================================================================================

Тип Boolean может хранить одно из двух значений: true (истина) или false (ложь).

val a: Boolean = true
val b: Boolean = false

СИМВОЛЫ==========================================================================================================================================================================================================

Символьные данные представлены типом Char. Он представляет отдельный символ, который заключается в одинарные кавычки.

val a: Char = 'A'
val b: Char = 'B'
val c: Char = 'T'
Также тип Char может представлять специальные последовательности, которые интерпретируются особым образом:
\t: табуляция
\n: перевод строки
\r: возврат каретки
\': одинарная кавычка
\": двойная кавычка
\\: обратный слеш

СТРОКИ===========================================================================================================================================================================================================

Строки представлены типом String. Строка представляет последовательность символов, заключенную в двойные кавычки, либо в тройные двойные кавычки.

fun main() {
     
    val name: String = "Eugene"
 
    println(name)
}
Строка может содержать специальные символы или эскейп-последовательности. Например, если необходимо вставить в текст перевод на другую строку, можно использовать эскейп-последовательность \n:

val text: String = "SALT II was a series of talks between United States \n and Soviet negotiators from 1972 to 1979"
Для большего удобства при создании многострочного текста можно использовать тройные двойные кавычки:

fun main() {
 
    val text: String = """
                        SALT II was a series of talks between United States
                        and Soviet negotiators from 1972 to 1979.
                        It was a continuation of the SALT I talks.
                    """
    println(text)
}

ВЫВЕДЕНИЕ ТИПА==============================================================================================================================================================================================

Kotlin позволяет выводить тип переменной на основании данных, которыми переменная инициализируется. Поэтому при инициализации переменной тип можно опустить:

val age = 5
В данном случае компилятор увидит, что переменной присваивается значение типа Int, поэтому переменная age будет представлять тип Int.

Соответственно если мы присваиваем переменной строку, то такая переменная будет иметь тип String.
val name = "Tom"
Любые целые числа, воспринимаются как данные типа Int.

Если же мы хотим явно указать, что число представляет значение типа Long, то следует использовать суффикс L:

val sum = 45L
Если надо указать, что объект представляет беззнаковый тип, то применяется суффикс u или U:

val sum = 45U
Аналогично все числа с плавающей точкой (которые содержат точку в качестве разделителя целой и дробной части) рассматриваются как числа типа Double:

val height = 1.78
Если мы хотим указать, что данные будут представлять тип Float, то необходимо использовать суффикс f или F:

val height = 1.78F
Однако нельзя сначала объявить переменную без указания типа, а потом где-то в программе присвоить ей какое-то значение:

val age     // Ошибка, переменная не инициализирована
age = 5 
      
=================================================================================================================================================================================================================
